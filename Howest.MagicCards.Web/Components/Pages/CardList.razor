@using Howest.MagicCards.Shared.DTO.CardDT0
@using System.Text.RegularExpressions
@using Howest.MagicCards.Shared.DTO.DeckDTO
@using static Howest.MagicCards.Shared.Extensions.CardExtensions


@rendermode InteractiveServer


<div class="flex">
    <div class="card-grid">
        @if (!Cards.Any())
        {
            @LoadingTemplate
        }
        else
        {
            @foreach (CardReadDetailDTO card in Cards)
            {
                <div class="card">
                    <div class="card-inner">

                        <div class="card-front" @onclick="async () => await AddCardToDeck(card)">
                            <img src="@card.ImageUrl" alt="@card.Name" />
                        </div>

                        <div class="card-back" @onclick="async () => await AddCardToDeck(card)">
                            <h3> <span class="bold">@card.Name</span> </h3>
                            <p> <span class="bold">Set:</span> @card.SetName  </p>
                            <p> <span class="bold"> Artist:</span> @card.ArtistFullName </p>
                            <div class="mana-cost">
                                <p> <span class="bold">Mana Cost:</span> </p>
                                @foreach (char manaSymbol in @ConvertManaCost(card.ManaCost))
                                {
                                    <i class="ms ms-@manaSymbol ms-cost ms-shadow"></i>
                                }
                            </div>
                            <p> <span class="bold"> Rarity: </span> @card.Rarity </p>
                            <p> <span class="bold"> Type: </span> @string.Join(" ~ ", @card.TypeNames) </p>
                        </div>

                    </div>
                </div>
            }
        }
    </div>
    <aside>
        <h2>My Deck</h2>
        @if(HasPrevDeck == true)
        {
            <button class="reset-prev-deck-button" @onclick="async () =>  await GetPrevDeck()">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15 15" fill="#000000">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M4.85355 2.14645C5.04882 2.34171 5.04882 2.65829 4.85355 2.85355L3.70711 4H9C11.4853 4 13.5 6.01472 13.5 8.5C13.5 10.9853 11.4853 13 9 13H5C4.72386 13 4.5 12.7761 4.5 12.5C4.5 12.2239 4.72386 12 5 12H9C10.933 12 12.5 10.433 12.5 8.5C12.5 6.567 10.933 5 9 5H3.70711L4.85355 6.14645C5.04882 6.34171 5.04882 6.65829 4.85355 6.85355C4.65829 7.04882 4.34171 7.04882 4.14645 6.85355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645L4.14645 2.14645C4.34171 1.95118 4.65829 1.95118 4.85355 2.14645Z" fill="#000000" />
                </svg>
            </button>
        }

        <button class="delete-deck-button" @onclick="async () =>  await ClearDeck()">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" version="1.1" id="Capa_1" viewBox="0 0 482.428 482.429" xml:space="preserve">
            <g>
            <g>
            <path d="M381.163,57.799h-75.094C302.323,25.316,274.686,0,241.214,0c-33.471,0-61.104,25.315-64.85,57.799h-75.098    c-30.39,0-55.111,24.728-55.111,55.117v2.828c0,23.223,14.46,43.1,34.83,51.199v260.369c0,30.39,24.724,55.117,55.112,55.117    h210.236c30.389,0,55.111-24.729,55.111-55.117V166.944c20.369-8.1,34.83-27.977,34.83-51.199v-2.828    C436.274,82.527,411.551,57.799,381.163,57.799z M241.214,26.139c19.037,0,34.927,13.645,38.443,31.66h-76.879    C206.293,39.783,222.184,26.139,241.214,26.139z M375.305,427.312c0,15.978-13,28.979-28.973,28.979H136.096    c-15.973,0-28.973-13.002-28.973-28.979V170.861h268.182V427.312z M410.135,115.744c0,15.978-13,28.979-28.973,28.979H101.266    c-15.973,0-28.973-13.001-28.973-28.979v-2.828c0-15.978,13-28.979,28.973-28.979h279.897c15.973,0,28.973,13.001,28.973,28.979    V115.744z" />
            <path d="M171.144,422.863c7.218,0,13.069-5.853,13.069-13.068V262.641c0-7.216-5.852-13.07-13.069-13.07    c-7.217,0-13.069,5.854-13.069,13.07v147.154C158.074,417.012,163.926,422.863,171.144,422.863z" />
            <path d="M241.214,422.863c7.218,0,13.07-5.853,13.07-13.068V262.641c0-7.216-5.854-13.07-13.07-13.07    c-7.217,0-13.069,5.854-13.069,13.07v147.154C228.145,417.012,233.996,422.863,241.214,422.863z" />
            <path d="M311.284,422.863c7.217,0,13.068-5.853,13.068-13.068V262.641c0-7.216-5.852-13.07-13.068-13.07    c-7.219,0-13.07,5.854-13.07,13.07v147.154C298.213,417.012,304.067,422.863,311.284,422.863z" />
                    </g>
                </g>
            </svg>
        </button>

        @if (DeckEntries != null && DeckEntries.Any())
        {
            <p>Total Cards: @DeckEntries.Sum(entry => entry.Quantity)</p>
        }
        else
        {
            <p>Your deck is empty</p>
        }
        @if (DeckEntries != default)
        {

            @foreach (DeckEntryReadDTO deckEntry in DeckEntries)
            {
                <div class="deck-card-container">

                    <div @onclick="async () => await IncrementDeckEntry(deckEntry.Card.Id)" class="counter">@deckEntry.Quantity</div>

                    <div @onclick="async () => await DecrementDeckEntry(deckEntry.Card.Id)" class="d-flex w-100 ae-card-linewrap card-border-@GetManaColors(deckEntry.Card.ManaCost)">
                        <div class="ae-cardname flex-grow-1 d-flex card-color-core card-core-@GetManaColors(deckEntry.Card.ManaCost)">
                            <div class="flex-grow-1 displayed-name">@deckEntry.Card.Name</div>
                            <div class="text-right mana-symbol">
                                @foreach (char manaSymbol in @ConvertManaCost(deckEntry.Card.ManaCost))
                                {
                                    <i class="ms ms-@manaSymbol ms-cost ms-shadow"></i>
                                }
                            </div>
                        </div>
                    </div>
                </div>

            }
        }
    </aside>
</div>

<div class="paginator-container">
    <label for="itemsPerPage">Items per page:</label>
    <input type="number" id="itemsPerPage" min="1" max="150" value="@PageSize" @onchange="HandlePageSizeChange" />
    <button @onclick="@GoToPrevPage">Previous</button>
    <span>Page @CurrentPage of @TotalPages </span>
    <button @onclick="@GoToNextPage">Next</button>
</div>


@code {
    [Parameter]
    public IEnumerable<CardReadDetailDTO> Cards { get; set; }

    [Parameter]
    public IEnumerable<DeckEntryReadDTO> DeckEntries { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public bool HasPrevDeck { get; set; }

    [Parameter]
    public EventCallback<(long cardId, string cardName, string manacost)> OnAddCardToDeck { get; set; }

    [Parameter]
    public EventCallback<long> OnIncrementDeckEntry { get; set; }

    [Parameter]
    public EventCallback<long> OnDecrementDeckEntry { get; set; }

    [Parameter]
    public EventCallback OnClearDeck { get; set; }

    [Parameter]
    public EventCallback<int> OnHandlePageChange { get; set; }

    [Parameter]
    public EventCallback<int> OnHandlePageSizeChange { get; set; }

    [Parameter]
    public EventCallback OnResetPrevDeck { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }


    private async Task AddCardToDeck(CardReadDetailDTO card)
    {
        await OnAddCardToDeck.InvokeAsync((card.Id, card.Name, card.ManaCost));
    }

    private async Task IncrementDeckEntry(long cardId)
    {
        await OnIncrementDeckEntry.InvokeAsync(cardId);
    }

    private async Task DecrementDeckEntry(long cardId)
    {
        await OnDecrementDeckEntry.InvokeAsync(cardId);
    }

    private async Task ClearDeck()
    {
        await OnClearDeck.InvokeAsync();
    }


    private async Task GoToNextPage()
    {
        if (CurrentPage == TotalPages)
        {
            return;
        }
        await OnHandlePageChange.InvokeAsync(CurrentPage + 1);
    }

    private async Task GoToPrevPage()
    {
        if (CurrentPage == 1)
        {
            return;
        }
        await OnHandlePageChange.InvokeAsync(CurrentPage - 1);
    }

    private async Task HandlePageSizeChange(ChangeEventArgs e)
    {
       await OnHandlePageSizeChange.InvokeAsync(int.Parse(e.Value.ToString()));
    }

    private async Task GetPrevDeck()
    {
        await OnResetPrevDeck.InvokeAsync();
    }
}
